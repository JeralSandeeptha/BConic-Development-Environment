version: '3.8'

services:
  frontend:
    container_name: bconic_frontend_container
    build:
      context: ../app/BConic-Frontend
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ../app/BConic-Frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_BACKEND_BASE_URL=http://localhost:5000/api/v1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    stdin_open: true
    tty: true
    depends_on:
      - backend
  backend:
    container_name: bconic_backend_container
    build:
      context: ../app/BConic-Backend
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - "5000:5000"
    volumes:
      - ../app/BConic-Backend:/app
      - /app/node_modules
    environment:
      - DATABASE_URL=postgresql://jeral:1234@bconic_db_container:5432/bconic_db
      - PORT=5000
      - NODE_ENV=development
      - JWT_SECRET=secret
      - POSTGRES_USER=jeral
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=bconic_db
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - postgres
  postgres:
    image: postgres:13
    container_name: bconic_db_container
    environment:
      - POSTGRES_USER=jeral
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=bconic_db
    ports:
      - "5432:5432"
    volumes:
      - ./docker_volumes/postgres:/var/lib/postgresql/data
  pgAdmin:
    image: elestio/pgadmin:latest
    container_name: bconic_pgadmin_container
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=jeral@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=1234
    ports:
      - "5433:80"
    depends_on:
      - postgres
  jenkins:
    image: jenkins/jenkins:latest
    container_name: bconic_jenkins_container
    privileged: true
    restart: always
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./docker_volumes/jenkins_compose/jenkins_configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
  sonarqube:
    image: sonarqube:latest
    container_name: bconic_sonarqube_container
    restart: always
    depends_on:
      - sonarqube_db
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./docker_volumes/sonarqube/sonarqube_data:/opt/sonarqube/data
      - ./docker_volumes/sonarqube/sonarqube_logs:/opt/sonarqube/logs
      - ./docker_volumes/sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
  sonarqube_db:
    image: postgres:13
    container_name: bconic_sonarqube_db_container
    restart: always
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - ./docker_volumes/postgres_sonarqube:/var/lib/postgresql/data
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_container
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker_volumes/prometheus_data:/prometheus
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./docker_volumes/grafana_data:/var/lib/grafana
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: admin1234
    ports:
      - 9300:9300
      - 9200:9200
    volumes:
      - ./docker_volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.12.2
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2Jjb25pYy1raWJhbmE6b0JtVUV6dWJSVVdKaVhFd1BSbWZ6QQ
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on: 
      - elasticsearch
  heartbeat:
    container_name: heartbeat_container
    image: docker.elastic.co/beats/heartbeat:8.12.2
    user: root
    hostname: heartbeat
    cap_add:
      - NET_RAW
    networks:
      - elastic
    command: ["--strict.perms=false"]
    volumes:
      - ./heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    depends_on: 
      - elasticsearch
  metricbeat:
    container_name: metricbeat_container
    image: docker.elastic.co/beats/metricbeat:8.12.2
    user: root
    ports:
      - 5066:5066
    networks:
      - elastic
    volumes:
      - ./metricbeat.yml/:/usr/share/metricbeat/metricbeat.yml:ro
      # docker module
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # system module
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    depends_on: 
      - elasticsearch

networks:
  elastic:
    name: elastic